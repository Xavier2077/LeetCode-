class MyCircularQueue {
public:
    vector<int> arr;
    int head;
    int tail;
    int size;
    int capacity;
    MyCircularQueue(int k):arr(k),head(0),tail(0),size(0),capacity(k) 
    {}
    
    bool enQueue(int value) {
        if(this->isFull())
        {
            return false;
        }
        arr[tail] = value;
        tail = (tail + 1) % arr.size();
        ++size;
        return true;
    }
    
    bool deQueue() {
        if(this->isEmpty())
        {
            return false;
        }
        head = (head + 1) % arr.size();
        --size;
        return true;
    }
    
    int Front() {
        if(this->isEmpty())
        {
            return -1;
        }
        return arr[head];
    }
    
    int Rear() {
        if(this->isEmpty())
        {
            return -1;
        }
        // ind = tail - 1 + n;
        // //tial - 1 + n = n - 1
        // if(ind == -1)
        // {
        //     ind = tail - 1 + n;
        // }
        // return arr[ind];
        return arr[(tail - 1 + arr.size()) % arr.size()];
    }
    
    bool isEmpty() {
        if(size == 0)
        {
            return true;
        }
        return false;
    }
    
    bool isFull() {
        if(size == capacity)
        {
            return true;
        }
        return false;
    }
};
